configfile: "config/config.yaml"

rule all:
    input:
        "calls/all.vcf",
        "calls/positions.png",
        "calls/quals.svg",


def get_bwa_map_input_fastqs(wildcards):
    return config["samples"][wildcards.sample]


rule bwa_map:
    input:
        "data/genome.fa",
        get_bwa_map_input_fastqs,
    output:
        "mapped_reads/{sample}.bam",
    log:
        "logs/bwa_map/{sample}.log",
    params:
        rg=config['bwa_map']['rg'],
    shell:
        "(bwa mem -R '{params.rg}' {input} | samtools view -Sb - > {output}) 2> {log}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam",
    output:
        "sorted_reads/{sample}.bam",
    log:
        "logs/samtools_sort/{sample}.log",
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam -o {output} {input} 2> {log}"


rule samtools_index:
    input:
        "sorted_reads/{sample}.bam",
    output:
        "sorted_reads/{sample}.bam.bai",
    log:
        "logs/samtools_index/{sample}.log",
    shell:
        "samtools index {input} 2> {log}"


rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=config["samples"]),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=config["samples"]),
    output:
        "calls/all.vcf",
    log:
        "logs/bcftools_call/bcftools.log",
    shell:
        "(bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}) 2> {log}"


rule plot_positions:
    input:
        rules.bcftools_call.output,
    output:
        "calls/positions.png",
    script:
        "scripts/plot-positions.py"


rule plot_quals:
    input:
        "calls/all.vcf",
    output:
        "calls/quals.svg",
    script:
        "scripts/plot-quals.py"
