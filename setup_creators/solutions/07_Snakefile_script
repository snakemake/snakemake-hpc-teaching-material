# our samples are pre-configured
SAMPLES = ["A", "B"]


rule all:
    input:
        "calls/all.vcf",
        "calls/positions.png",
        "calls/quals.svg"

rule bwa_map:
    input:
        "data/genome.fa",
        "data/samples/{sample}.fastq"
    output:
        "mapped_reads/{sample}.bam"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam -o {output} {input}"


rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"


rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=SAMPLES),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls/all.vcf"
    shell:
        "bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

rule plot_positions:
    input:
       rules.bcftools_call.output
    output:
       "calls/positions.png"
    run:
       import matplotlib
       matplotlib.use("Agg") # to suppress interactive plotting
       import matplotlib.pyplot as plt
       import numpy as np
       from pysam import VariantFile
       import seaborn as sns
       #TODO: this parameter needs to be configurable
       #      see one of the next exercises
       window_size = 500

       pos = [record.pos for record in VariantFile(input[0])]
       # setup windows 
       bins = np.arange(0, max(pos), window_size)
    
       # use window midpoints as x coordinate
       x = (bins[1:] + bins[:-1])/2
    
       # compute variant density in each window
       h, _ = np.histogram(pos, bins=bins)
       y = h / window_size
    
       # plot
       fig, ax = plt.subplots(figsize=(12, 3))
       sns.despine(ax=ax, offset=10)
       ax.plot(x, y)
       ax.set_xlabel('Chromosome position (bp)')
       ax.set_ylabel('Variant density (bp$^{-1}$)')
       plt.savefig(output[0])
       
rule plot_quals:
    input:
        "calls/all.vcf"
    output:
        "calls/quals.svg"
    script:
        "scripts/plot-quals.py"

